<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd">

	<mvc:default-servlet-handler />

	<!-- <mvc:resources mapping="*.html" location="/" /> -->

	<context:component-scan base-package="com.official.web.controller" />

	<bean class="com.official.core.util.SpringUtils">
	</bean>
	<!-- 文件上传设置 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>20971520</value><!-- 文件上传最大为20M -->
		</property>
		<property name="maxInMemorySize" value="4096" />
	</bean>

	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<!-- 内容协商管理器 -->
	<!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true" />
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="format" />
		<!-- 是否忽略Accept Header -->
		<property name="ignoreAcceptHeader" value="false" />

		<property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用 -->
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="html" value="text/html" />
			</map>
		</property>
		<!-- 默认的content type -->
		<property name="defaultContentType" value="text/html" />
	</bean>
	<!-- 自动注册ConversionService -->
	<mvc:annotation-driven conversion-service="conversionService"
		content-negotiation-manager="contentNegotiationManager"
		enable-matrix-variables="true">
		<mvc:message-converters register-defaults="true">
			<!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
				<property name="supportedMediaTypes">
					<list>
						<bean class="org.springframework.http.MediaType">
							<constructor-arg index="0" value="text" />
							<constructor-arg index="1" value="plain" />
							<constructor-arg index="2" value="UTF-8" />
						</bean>
						<bean class="org.springframework.http.MediaType">
							<constructor-arg index="0" value="*" />
							<constructor-arg index="1" value="*" />
							<constructor-arg index="2" value="UTF-8" />
						</bean>
					</list>
				</property>
			</bean>

			<!-- 配置Fastjson支持 -->
			<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
			<bean id="fastJsonHttpMessageConverter"
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>text/plain;charset=utf-8</value>
						<value>text/html;charset=utf-8</value>
						<value>text/json;charset=utf-8</value>
					</list>
				</property>
				<property name="features">
					<list>
						<value>WriteMapNullValue</value>
						<!-- <value>QuoteFieldNames</value> -->
						<value>WriteDateUseDateFormat</value>
						<value>SkipTransientField</value>
						<!-- <value>SortField</value> -->
						<value>DisableCircularReferenceDetect</value>
						<value>PrettyFormat</value>
					</list>
				</property>
				<!--<property name="serializerFeature"> -->
				<!--这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等 -->
				<!--</property> -->
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- ========================= VIEW定义 ========================= -->
	<!-- 内容协商视图解析器；根据客户端的不同的请求决定不同的 view进行响应, 如 /blog/1.json /blog/1.xml -->
	<!-- 会自动根据解析的contentType来决定使用哪个视图解析器（默认使用整个web应用中的viewResolver） -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
		p:order="0">
		<!-- 内容协商管理器 用于决定media type -->
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<!-- 默认视图 放在解析链最后 -->
		<property name="defaultViews">
			<list>
				<!--<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/> -->
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView" />
				<!--<bean class="org.springframework.web.servlet.view.xml.MarshallingView"/> -->
				<!-- <bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
					<property name="marshaller"> <bean class="org.springframework.oxm.xstream.XStreamMarshaller" 
					/> </property> </bean> -->
			</list>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/resources.properties</value>
			</list>
		</property>
	</bean>
	<bean name="beetlConfig" class="org.beetl.ext.spring.BeetlGroupUtilConfiguration"
		init-method="init">
		<property name="configFileResource" value="/WEB-INF/beetl.properties" />
	</bean>
	<bean name="cmsBeetlViewResolver" class="org.beetl.ext.spring.BeetlSpringViewResolver">
		<!-- 多视图解析器，需要设置viewNames和order -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".html" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="order" value="1" />
		<!-- 多GroupTemplate，需要指定使用的bean -->
		<property name="config" ref="beetlConfig" />
	</bean>

	<mvc:interceptors>
		<bean class="com.official.interceptor.ResourceInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/admin/**/*.htm" />
			<bean class="com.official.interceptor.SecurityInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/login/**/*.htm" />
			<bean class="com.official.interceptor.UnknownInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- redis -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		
	</bean>
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
                  value="com.official.core.util.LoginUtils.setRedisTemplate"/>
        <property name="arguments" ref="redisTemplate"/>
	</bean>
	<import resource="dubbo.xml" />
</beans>